name: Compile
on:
  push:
    tags:
    - '*'
jobs:

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        os: [windows-latest]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.3

    - name: Get CMake
      uses: lukka/get-cmake@latest

    - name: Download libsndfile
      run: |
        cd thirdparty
        curl -OL https://github.com/libsndfile/libsndfile/releases/download/1.0.31/libsndfile-1.0.31-win64.zip
        tar -xf libsndfile-1.0.31-win64.zip
        ls -r ${{ github.workspace }}/thirdparty/libsndfile-1.0.31-win64/*

    - name: Build LLVM
      run: |
        cd thirdparty/llvm-project/llvm
        cmake -Bbuild -DLLVM_USE_CRT_DEBUG=MDd -DLLVM_USE_CRT_RELEASE=MD -DLLVM_BUILD_TESTS=Off -DCMAKE_INSTALL_PREFIX="./llvm" -Thost=x64
        msbuild build/LLVM.sln /property:Configuration=Release
    
    - name: Build TD-Faust (Release)
      run: |
        cmake -Bbuild -DUSE_LLVM_CONFIG=off -DSndFile_DIR=${{ github.workspace }}/thirdparty/libsndfile-1.0.31-win64/cmake
        msbuild build/TD-Faust.sln /property:Configuration=Release
      env:
        LLVM_DIR: ${{ github.workspace }}/thirdparty/llvm-project/llvm/build/lib/cmake/llvm

    - name: Make distribution
      run: |
        mkdir TD-Faust_dist
        move ${{ github.workspace }}/Plugins/TD-Faust.dll TD-Faust_dist
        move ${{ github.workspace }}/Plugins/faust.dll TD-Faust_dist
        tar.exe -c -f ${{ matrix.os }}.zip TD-Faust_dist

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact-${{ matrix.os }}
        path: ${{ matrix.os }}.zip

  build-macos:
    strategy:
      matrix:
        name: [macos-cmake]
        include:
          - name: macos-cmake
            os: macos-latest
            cc: clang
            cxx: clang++
            build-system: cmake
            cmake-generator: 'Unix Makefiles'
            cmake-options: >-
              -DCMAKE_BUILD_TYPE=Release
              -DCMAKE_VERBOSE_MAKEFILE=ON
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: download LLVM
      run: |
        cd thirdparty
        curl -OL https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/clang+llvm-12.0.0-x86_64-apple-darwin.tar.xz
        tar -xf clang+llvm-12.0.0-x86_64-apple-darwin.tar.xz
        ls -r ${{ github.workspace }}/thirdparty/clang+llvm-12.0.0-x86_64-apple-darwin/lib/cmake/llvm/*

    - name: Build libsndfile
      run: |
        brew install autoconf autogen automake flac libogg libtool libvorbis opus mpg123 pkg-config speex
        mkdir thirdparty/libsndfile/build
        cd thirdparty/libsndfile/build
        cmake .. -G "${{matrix.cmake-generator}}" ${{matrix.cmake-options}}
        cmake --build . --config Release
    - name: Use CMake for TD-Faust
      run: |
        cmake -Bbuild -DUSE_LLVM_CONFIG=off -G "Xcode" -DCMAKE_PREFIX_PATH=${{ github.workspace }}/thirdparty/clang+llvm-12.0.0-x86_64-apple-darwin/lib/cmake/llvm -DSndFile_DIR=${{ github.workspace }}/thirdparty/libsndfile/build
        cmake -Bbuild -DUSE_LLVM_CONFIG=off -G "Xcode" -DCMAKE_PREFIX_PATH=${{ github.workspace }}/thirdparty/clang+llvm-12.0.0-x86_64-apple-darwin/lib/cmake/llvm -DSndFile_DIR=${{ github.workspace }}/thirdparty/libsndfile/build
    - name: Build TD-Faust (Release)
      run: |
        xcodebuild -configuration Release -project build/TD-Faust.xcodeproj/
        ls -r *
        mv Release/TD-Faust.bundle Release/TD-Faust.plugin
        cd ${{ github.workspace }}/thirdparty/faust/build/lib/Release
        ls -r *
        mv libfaust.2.38.7.dylib libfaust.2.dylib

    - name: Make distribution
      run: |
        mkdir TD-Faust_dist
        cp ${{ github.workspace }}/thirdparty/faust/build/lib/Release/*.dylib TD-Faust_dist
        mv ${{ github.workspace }}/Release/*.plugin TD-Faust_dist
        zip -r ${{ matrix.os }}.zip TD-Faust_dist

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact-${{ matrix.os }}
        path: ${{ matrix.os }}.zip

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    name: "Create Release on GitHub"
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: "dist"

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true

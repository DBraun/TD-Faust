name: Compile
on:
  pull_request: {}
  # push:
  #   branches:
  #     - main
  push:
    tags:
    - '*'
jobs:

  build-windows:
    runs-on: windows-2019
    strategy:
      matrix:
        os: [windows-2019]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.9"

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.3

    - name: Get CMake
      uses: lukka/get-cmake@latest

    - name: Download libsndfile
      run: |
        cd thirdparty
        curl -OL https://github.com/libsndfile/libsndfile/releases/download/1.0.31/libsndfile-1.0.31-win64.zip
        tar -xf libsndfile-1.0.31-win64.zip
        ls -r ${{ github.workspace }}/thirdparty/libsndfile-1.0.31-win64/*

    - name: Build LLVM
      run: |
        cd thirdparty/llvm-project/llvm
        cmake -Bbuild -DLLVM_USE_CRT_DEBUG=MDd -DLLVM_USE_CRT_RELEASE=MD -DLLVM_BUILD_TESTS=Off -DCMAKE_INSTALL_PREFIX="./llvm" -Thost=x64 -DLLVM_ENABLE_ZLIB=off -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_TARGETS_TO_BUILD="X86;ARM"
        msbuild build/LLVM.sln /property:Configuration=Release
    
    - name: Build TD-Faust (Release)
      run: |
        cmake -Bbuild -DUSE_LLVM_CONFIG=off -DSndFile_DIR=${{ github.workspace }}/thirdparty/libsndfile-1.0.31-win64/cmake -DPython_ROOT_DIR=$pythonLocation
        msbuild build/TD-Faust.sln /property:Configuration=Release
      env:
        LLVM_DIR: ${{ github.workspace }}/thirdparty/llvm-project/llvm/build/lib/cmake/llvm

    - name: Make distribution
      run: |
        mkdir TD-Faust_dist
        move ${{ github.workspace }}/Plugins/TD-Faust.dll TD-Faust_dist
        move ${{ github.workspace }}/Plugins/faust.dll TD-Faust_dist
        cp ${{ github.workspace }}/thirdparty/libsndfile-1.0.31-win64/bin/sndfile.dll TD-Faust_dist
        cp -v -r ${{ github.workspace }}/Plugins/faustlibraries TD-Faust_dist
        Remove-Item -Recurse -Force "TD-Faust_dist/faustlibraries/.git"
        7z a TD-Faust-${{ matrix.os }}.zip ./TD-Faust_dist/* -r

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact-${{ matrix.os }}
        path: TD-Faust-${{ matrix.os }}.zip

  build-macos:
    strategy:
      matrix:
        include:
          - name: macos-x86_64
            os: macos-latest

    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Setup Python 3.9
      run: |
        pip install --upgrade certifi
        cd install_script
        python macos_install_python.py

    - name: Build Everything
      run: |
        export PATH=/Library/Frameworks/Python.framework/Versions/3.9:/Library/Frameworks/Python.framework/Versions/3.9/bin:/Library/Frameworks/Python.framework/Versions/3.9/lib:$PATH
        which python3
        python3 --version
        sh -v build_macos.sh

    - name: Make distribution
      run: |
        rm -rf Plugins/faustlibraries/.git
        zip -r TD-Faust-${{ matrix.name }}.zip Plugins

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact-${{ matrix.name }}
        path: TD-Faust-${{ matrix.name }}.zip

  build-ubuntu:
    strategy:
      matrix:
        include:
          - name: ubuntu-x86_64
            theContainer: docker://quay.io/pypa/manylinux2014_x86_64
            os: ubuntu-latest
            cmake-options: >-
              -DCMAKE_BUILD_TYPE=Release
              -DCMAKE_VERBOSE_MAKEFILE=ON
            llvm-options: >-
              -DLLVM_TARGETS_TO_BUILD="X86"
              -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-linux-gnu"
          # - name: ubuntu-aarch64
          #   theContainer: docker://quay.io/pypa/manylinux2014_aarch64
          #   os: ubuntu-latest
          #   cmake-options: >-
          #     -DCMAKE_BUILD_TYPE=Release
          #     -DCMAKE_VERBOSE_MAKEFILE=ON
          #     -DCMAKE_SYSTEM_PROCESSOR=aarch64
          #     -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu
          #   llvm-options: >-
          #     -DLLVM_TARGETS_TO_BUILD="AArch64"
          #     -DLLVM_DEFAULT_TARGET_TRIPLE="aarch64-linux-gnu"

    runs-on: ubuntu-latest
    container:
      image: ${{matrix.theContainer}}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    # - name: Set up QEMU for aarch64 on Linux
    #   if: runner.os == 'Linux'
    #   uses: docker/setup-qemu-action@v1
    #   with:
    #     platforms: all

    - name: Checkout ncurses
      uses: actions/checkout@v2
      with:
        repository: mirror/ncurses
        path: ncurses

    - name: ncurses install
      run: |
        yum install zip -y
        cd ncurses
        ./configure --prefix=/usr/local/ncurses/6_3 --with-shared --with-pkg-config-libdir=/usr/local/ncurses/6_3/lib/pkgconfig --enable-pc-files
        make
        make install

    - name: Build libsndfile
      run: |
        cd thirdparty/libsndfile
        cmake -Bbuild -G "Unix Makefiles" ${{matrix.cmake-options}} -DENABLE_EXTERNAL_LIBS=off
        cmake --build build --config Release

    - name: Build LLVM
      run: |
        cd thirdparty/llvm-project/llvm
        cmake -Bbuild -DCMAKE_INSTALL_PREFIX="./llvm" ${{matrix.cmake-options}} ${{matrix.llvm-options}} -DLLVM_ENABLE_ZLIB=off -DLLVM_OPTIMIZED_TABLEGEN=ON
        cmake --build build --config Release

    - name: Use CMake for TD-Faust
      run: |
        cmake -Bbuild ${{matrix.cmake-options}} -DUSE_LLVM_CONFIG=off -DCMAKE_PREFIX_PATH="$PWD/thirdparty/llvm-project/llvm/build/lib/cmake/llvm;/usr/local/ncurses/6_3/lib/pkgconfig" -DSndFile_DIR=$PWD/thirdparty/libsndfile/build -DCURSES_LIBRARY=/usr/local/ncurses/6_3/lib -DCURSES_INCLUDE_PATH=/usr/local/ncurses/6_3/include/ncurses
        cmake -Bbuild ${{matrix.cmake-options}} -DUSE_LLVM_CONFIG=off -DCMAKE_PREFIX_PATH="$PWD/thirdparty/llvm-project/llvm/build/lib/cmake/llvm;/usr/local/ncurses/6_3/lib/pkgconfig" -DSndFile_DIR=$PWD/thirdparty/libsndfile/build -DCURSES_LIBRARY=/usr/local/ncurses/6_3/lib -DCURSES_INCLUDE_PATH=/usr/local/ncurses/6_3/include/ncurses
        cmake --build build --config Release

    - name: Make distribution
      run: |
        mkdir TD-Faust_dist
        cp -v -r thirdparty/faust/build/lib TD-Faust_dist
        zip -r TD-Faust-${{ matrix.name }}.zip TD-Faust_dist

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact-${{ matrix.name }}
        path: TD-Faust-${{ matrix.name }}.zip

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-windows, build-macos, build-ubuntu]
    runs-on: ubuntu-latest
    name: "Create Release on GitHub"
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: "dist"

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
